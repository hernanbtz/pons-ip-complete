/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pons;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author sergi
 */
public class ImpExcelBC extends javax.swing.JFrame {

    private int vista = 0;
    private int indiceFila = 0;
    private String columnaDatos = "";
    //private ArrayList<String> fila;
    //private ArrayList<ArrayList> conjuntoFilas;
    private ArrayList<String> prueba;
    private HashMap<String, String> valores;
    private boolean isImport = false;

    /**
     * Creates new form ImpExcelBC
     */
    public ImpExcelBC() {
        initComponents();
        iniciarVista();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btn_importBC = new javax.swing.JButton();
        btn_importApi = new javax.swing.JButton();
        btn_exportar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btn_rellenar = new javax.swing.JButton();
        scroll_BC = new javax.swing.JScrollPane();
        tb_importBC = new javax.swing.JTable();
        scroll_API = new javax.swing.JScrollPane();
        tb_importAPI = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cb_bc = new javax.swing.JComboBox<>();
        cb_api = new javax.swing.JComboBox<>();
        txt_nombretabla = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_BorrarFilas = new javax.swing.JButton();
        btn_BorrarColumna = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        scroll_SF = new javax.swing.JScrollPane();
        tb_importSF = new javax.swing.JTable();
        btn_importSF = new javax.swing.JButton();
        rbAPI = new javax.swing.JRadioButton();
        rbBC = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        cb_sf = new javax.swing.JComboBox<>();
        btDeshacer = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txt_tablapreview = new javax.swing.JLabel();
        btn_siguientemodificado = new javax.swing.JButton();
        btn_ocultar = new javax.swing.JButton();
        btn_mostrar = new javax.swing.JButton();
        txt_dtTotal = new javax.swing.JLabel();
        btn_siguientevacio = new javax.swing.JButton();
        txt_buscador = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(1280, 720));
        jPanel1.setMinimumSize(new java.awt.Dimension(1280, 720));
        jPanel1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_importBC.setText("Importar Excel de BC");
        btn_importBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importBCActionPerformed(evt);
            }
        });
        jPanel1.add(btn_importBC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 680, -1, -1));

        btn_importApi.setText("Importar Excel de Apiges");
        btn_importApi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importApiActionPerformed(evt);
            }
        });
        jPanel1.add(btn_importApi, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 680, -1, -1));

        btn_exportar.setText("Exportar");
        btn_exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_exportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 680, 100, -1));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("CAMBIAR VISTA A EXCEL APIGES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 140, -1, -1));

        btn_rellenar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_rellenar.setText("RELLENAR");
        btn_rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rellenarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_rellenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 120, 170, -1));

        scroll_BC.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_BC.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll_BC.setMaximumSize(new java.awt.Dimension(1270, 570));
        scroll_BC.setMinimumSize(new java.awt.Dimension(1270, 570));
        scroll_BC.setName(""); // NOI18N
        scroll_BC.setPreferredSize(new java.awt.Dimension(1270, 570));

        tb_importBC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_importBC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_importBCMouseClicked(evt);
            }
        });
        scroll_BC.setViewportView(tb_importBC);

        jPanel1.add(scroll_BC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 1260, 420));

        scroll_API.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_API.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll_API.setMaximumSize(new java.awt.Dimension(1270, 570));
        scroll_API.setMinimumSize(new java.awt.Dimension(1270, 570));
        scroll_API.setName(""); // NOI18N
        scroll_API.setPreferredSize(new java.awt.Dimension(1270, 570));

        tb_importAPI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_importAPI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_importAPIMouseClicked(evt);
            }
        });
        scroll_API.setViewportView(tb_importAPI);

        jPanel1.add(scroll_API, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 1260, 420));

        jLabel1.setText("Columna de referencia en BC");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 100, -1, -1));

        jLabel2.setText("Columna de referencia en Apiges");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 150, -1, -1));

        cb_bc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cb_bc, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 120, -1, -1));

        cb_api.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cb_api, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 170, -1, -1));

        txt_nombretabla.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        txt_nombretabla.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_nombretabla.setText("NOMBRE DE LA TABLA");
        jPanel1.add(txt_nombretabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 330, 40));

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel6.setText("COMPLETACIÓN DATOS PONS IP");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, 540, 70));

        btn_BorrarFilas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_BorrarFilas.setText("Borrar filas");
        btn_BorrarFilas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BorrarFilasActionPerformed(evt);
            }
        });
        jPanel1.add(btn_BorrarFilas, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 150, 130, -1));

        btn_BorrarColumna.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_BorrarColumna.setText("Borrar columna");
        btn_BorrarColumna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BorrarColumnaActionPerformed(evt);
            }
        });
        jPanel1.add(btn_BorrarColumna, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 130, -1));

        jLabel3.setText("Nº filas a borrar al final de la tabla");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 320, -1));

        jLabel4.setText("Nº de la columna que quieres borrar");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel5.setText("IMPORTAR EXCEL");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/infoIcon.png"))); // NOI18N
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 650, 20, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/infoIcon.png"))); // NOI18N
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 20, -1));

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel7.setText("FORMATO");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel8.setText("EXPORTAR EXCEL");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 650, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/infoIcon.png"))); // NOI18N
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 650, 20, -1));

        scroll_SF.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_SF.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll_SF.setMaximumSize(new java.awt.Dimension(1270, 570));
        scroll_SF.setMinimumSize(new java.awt.Dimension(1270, 570));
        scroll_SF.setName(""); // NOI18N
        scroll_SF.setPreferredSize(new java.awt.Dimension(1270, 570));

        tb_importSF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_importSF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_importSFMouseClicked(evt);
            }
        });
        scroll_SF.setViewportView(tb_importSF);

        jPanel1.add(scroll_SF, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 1260, 420));

        btn_importSF.setText("Importar Excel de SF");
        btn_importSF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importSFActionPerformed(evt);
            }
        });
        jPanel1.add(btn_importSF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 680, -1, -1));

        buttonGroup1.add(rbAPI);
        rbAPI.setText("APIGES");
        rbAPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAPIActionPerformed(evt);
            }
        });
        jPanel1.add(rbAPI, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 180, -1, -1));

        buttonGroup1.add(rbBC);
        rbBC.setText("Business Central");
        rbBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBCActionPerformed(evt);
            }
        });
        jPanel1.add(rbBC, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 160, -1, -1));

        jLabel12.setText("Columna de referencia en SF");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 50, -1, -1));

        cb_sf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_sf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_sfActionPerformed(evt);
            }
        });
        jPanel1.add(cb_sf, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 70, -1, -1));

        btDeshacer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btDeshacer.setText("Deshacer");
        btDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeshacerActionPerformed(evt);
            }
        });
        jPanel1.add(btDeshacer, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 130, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/infoIcon.png"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, 20, -1));

        jLabel15.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel15.setText("DEPURACIÓN");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 30, -1, -1));

        txt_tablapreview.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        txt_tablapreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_tablapreview.setText("(AQUÍ SE MOSTRARÁ LA TABLA)");
        jPanel1.add(txt_tablapreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 320, 860, 180));

        btn_siguientemodificado.setText("SIGUIENTE REGISTRO MODIFICADO");
        btn_siguientemodificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_siguientemodificadoActionPerformed(evt);
            }
        });
        jPanel1.add(btn_siguientemodificado, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 640, 250, -1));

        btn_ocultar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_ocultar.setText("OCULTAR ");
        btn_ocultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ocultarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_ocultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 90, 170, -1));

        btn_mostrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_mostrar.setText("MOSTRAR");
        btn_mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mostrarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_mostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 60, 170, -1));
        jPanel1.add(txt_dtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 650, 250, 20));

        btn_siguientevacio.setText("SIGUIENTE REGISTRO VACIO");
        btn_siguientevacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_siguientevacioActionPerformed(evt);
            }
        });
        jPanel1.add(btn_siguientevacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 640, 220, -1));
        jPanel1.add(txt_buscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, 210, 30));

        btn_buscar.setText("BUSCAR");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_importBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importBCActionPerformed
        if (importarExcel(tb_importBC)) {
            rbBC.setEnabled(true);
            btn_BorrarFilas.setEnabled(true);
            btn_BorrarColumna.setEnabled(true);
            cambiarVista(0);
        }
    }//GEN-LAST:event_btn_importBCActionPerformed

    private void btn_exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportarActionPerformed
        try {
            exportarExcel(tb_importSF);

        } catch (IOException ex) {
            Logger.getLogger(ImpExcelBC.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_exportarActionPerformed

    private void btn_importApiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importApiActionPerformed
        if (importarExcel(tb_importAPI)) {
            rbAPI.setEnabled(true);
            btn_BorrarFilas.setEnabled(true);
            btn_BorrarColumna.setEnabled(true);
            cambiarVista(2);
        }
    }//GEN-LAST:event_btn_importApiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cambiarVista(vista);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_rellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rellenarActionPerformed
        if (tb_importSF.getSelectedColumn() < 0 || tb_importSF.getSelectedColumn() > tb_importSF.getColumnCount()) {
            JOptionPane.showMessageDialog(this, "Selecciona una columna pinchando en cualquiera de sus celdas");
        } else {
            rellenar();
        }
    }//GEN-LAST:event_btn_rellenarActionPerformed

    private void btn_BorrarFilasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BorrarFilasActionPerformed
        switch (vista) {
            case 0:
                borrarFilas(tb_importAPI);
                break;
            case 1:
                borrarFilas(tb_importBC);
                break;
            case 2:
                borrarFilas(tb_importSF);
            default:
                break;
        }
    }//GEN-LAST:event_btn_BorrarFilasActionPerformed

    private void btn_BorrarColumnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BorrarColumnaActionPerformed
        switch (vista) {
            case 0:
                borrarColumnas(tb_importAPI);
                break;
            case 1:
                borrarColumnas(tb_importBC);
                break;
            case 2:
                borrarColumnas(tb_importSF);
            default:
                break;
        }
    }//GEN-LAST:event_btn_BorrarColumnaActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        JOptionPane.showMessageDialog(rootPane, "Elige el archivo excel que quieres subir.\nCada botón corresponde a una plataforma diferente.");
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        JOptionPane.showMessageDialog(rootPane, "Formatea la tabla.\nEl botón 'Borrar filas' te pide el número de filas que quieres borrar AL FINAL de la tabla.\nEl botón borrar columna te pide el NÚMERO DE COLUMNA que quieres borrar.");
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        JOptionPane.showMessageDialog(rootPane, "Exporta la tabla de la vista a una hoja de Excel. Asegúrate de que no hay columnas vacías y de que no hay ninguna fila fuera de formato.\nRecuerda que solo se exportará la tabla de SF");
    }//GEN-LAST:event_jLabel11MouseClicked

    private void btn_importSFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importSFActionPerformed
        if (importarExcel(tb_importSF)) {
            btn_exportar.setEnabled(true);
            btn_BorrarFilas.setEnabled(true);
            btn_BorrarColumna.setEnabled(true);
            //almacenarTabla();
            cambiarVista(1);
        }
    }//GEN-LAST:event_btn_importSFActionPerformed

    private void cb_sfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_sfActionPerformed
        if (cb_sf.getSelectedItem() != null) {
            btn_rellenar.setEnabled(true);
        }
    }//GEN-LAST:event_cb_sfActionPerformed

    private void btDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeshacerActionPerformed
        deshacer(tb_importSF);
        btDeshacer.setEnabled(false);
    }//GEN-LAST:event_btDeshacerActionPerformed

    private void rbAPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAPIActionPerformed
        cb_api.setEnabled(true);
        cb_sf.setEnabled(true);
        cb_bc.setEnabled(false);
    }//GEN-LAST:event_rbAPIActionPerformed

    private void rbBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBCActionPerformed
        cb_sf.setEnabled(true);
        cb_bc.setEnabled(true);
        cb_api.setEnabled(false);
    }//GEN-LAST:event_rbBCActionPerformed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        JOptionPane.showMessageDialog(rootPane, "Elige las columnas que se van a comparar entre las diferentes tablas.");
    }//GEN-LAST:event_jLabel14MouseClicked

    private void btn_siguientemodificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_siguientemodificadoActionPerformed
        siguienteModificada(tb_importSF.getSelectedRow() + 1);
    }//GEN-LAST:event_btn_siguientemodificadoActionPerformed

    private void btn_ocultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ocultarActionPerformed
        if (tb_importSF.isVisible()) {
            ocultarCeldas(tb_importSF);
        } else if (tb_importAPI.isVisible()) {
            ocultarCeldas(tb_importAPI);
        } else if (tb_importBC.isVisible()) {
            ocultarCeldas(tb_importBC);
        }
    }//GEN-LAST:event_btn_ocultarActionPerformed

    private void btn_mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mostrarActionPerformed
        if (tb_importSF.isVisible()) {
            mostrarCeldas(tb_importSF);
        } else if (tb_importAPI.isVisible()) {
            mostrarCeldas(tb_importAPI);
        } else if (tb_importBC.isVisible()) {
            mostrarCeldas(tb_importBC);
        }
    }//GEN-LAST:event_btn_mostrarActionPerformed

    private void tb_importSFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_importSFMouseClicked
        txt_dtTotal.setText(datosTotales(tb_importSF));

    }//GEN-LAST:event_tb_importSFMouseClicked

    private void tb_importBCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_importBCMouseClicked
        txt_dtTotal.setText(datosTotales(tb_importBC));

    }//GEN-LAST:event_tb_importBCMouseClicked

    private void tb_importAPIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_importAPIMouseClicked
        txt_dtTotal.setText(datosTotales(tb_importAPI));

    }//GEN-LAST:event_tb_importAPIMouseClicked

    private void btn_siguientevacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_siguientevacioActionPerformed
        siguienteVacia(tb_importSF.getSelectedRow() + 1);
    }//GEN-LAST:event_btn_siguientevacioActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        if (tb_importAPI.isVisible()) {
            buscador(tb_importAPI.getSelectedColumn(), tb_importAPI.getSelectedRow() + 1, tb_importAPI);
        } else if (tb_importBC.isVisible()) {
            buscador(tb_importBC.getSelectedColumn(), tb_importBC.getSelectedRow() + 1, tb_importBC);
        } else if (tb_importSF.isVisible()) {
            buscador(tb_importSF.getSelectedColumn(), tb_importSF.getSelectedRow() + 1, tb_importSF);
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImpExcelBC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImpExcelBC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImpExcelBC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImpExcelBC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImpExcelBC().setVisible(true);
            }
        });
    }

    private void buscador(int columna, int fila, JTable t) {
        try {
            String datoAbuscar = String.valueOf(txt_buscador.getText());
            for (int i = columna; i < t.getColumnCount(); i++) {
                for (int j = fila; j < t.getRowCount(); j++) {
                    String dato = String.valueOf(t.getValueAt(j, i));
                    if (dato.contains(datoAbuscar)) {
                        t.setRowSelectionInterval(j, j);
                        JViewport viewport = (JViewport) t.getParent();
                        Rectangle rect = t.getCellRect(j, i, true);
                        Point pt = viewport.getViewPosition();
                        rect.setLocation(rect.x - pt.x, rect.y - pt.y);
                        viewport.scrollRectToVisible(rect);
                        t.setColumnSelectionInterval(i, i);
                        return;
                    }
                }
                fila = 0;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se han encontrado resultados");
        }

    }

    private String datosTotales(JTable t) {
        int n = 0;
        String sn = "Datos Totales: ";
        for (int i = 0; i < t.getRowCount(); i++) {
            if (t.getRowHeight(i) == 16) {
                n++;
            }
        }
        sn += n;
        return sn;
    }

    private void headerMouseListener(JTable table) {
        JTableHeader header = table.getTableHeader();
        header.addMouseListener(new TableHeaderMouseListener(table));
    }

    private void mostrarCeldas(JTable t) {
        for (int i = 0; i < t.getRowCount(); i++) {
            String dato = String.valueOf(t.getValueAt(i, t.getSelectedColumn()));
            if (dato.equals("")) {
                t.setRowHeight(i, 16);
            }
        }
    }

    private void ocultarCeldas(JTable t) {
        int celdas_vacias = 0;
        for (int i = 0; i < t.getRowCount(); i++) {
            String dato = String.valueOf(t.getValueAt(i, t.getSelectedColumn()));
            if (dato == null || dato.equals("") && t.getRowHeight(i) > 1) {
                t.setRowHeight(i, 1);
                celdas_vacias++;
            }
        }
        JOptionPane.showMessageDialog(this, "Hay " + celdas_vacias + " celdas vacías");
    }

    private void siguienteModificada(int n) {
        try {
            for (int i = n; i < tb_importSF.getRowCount(); i++) {
                String dato = String.valueOf(tb_importSF.getValueAt(i, tb_importSF.getSelectedColumn()));
                if (!prueba.get(i).equals(dato)) {
                    tb_importSF.setRowSelectionInterval(i, i);
                    JViewport viewport = (JViewport) tb_importSF.getParent();
                    Rectangle rect = tb_importSF.getCellRect(i, tb_importSF.getSelectedColumn(), true);
                    Point pt = viewport.getViewPosition();
                    rect.setLocation(rect.x - pt.x, rect.y - pt.y);
                    viewport.scrollRectToVisible(rect);
                    break;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Selecciona la primera celda para comenzar a buscar");
        }
    }

    private void siguienteVacia(int n) {
        try {
            for (int i = n; i < tb_importSF.getRowCount(); i++) {
                String dato = String.valueOf(tb_importSF.getValueAt(i, tb_importSF.getSelectedColumn()));
                if (dato.equals("")) {
                    tb_importSF.setRowSelectionInterval(i, i);
                    JViewport viewport = (JViewport) tb_importSF.getParent();
                    Rectangle rect = tb_importSF.getCellRect(i, tb_importSF.getSelectedColumn(), true);
                    Point pt = viewport.getViewPosition();
                    rect.setLocation(rect.x - pt.x, rect.y - pt.y);
                    viewport.scrollRectToVisible(rect);
                    break;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Selecciona la primera celda para comenzar a buscar");
        }
    }

    /*private void getCeldas() {
        DefaultTableModel model = new DefaultTableModel();
        for (int i = 0; i < tb_importSF.getRowCount(); i++) {
            model.removeRow(i);
            i--;
        }
        Object[] object = new Object[tb_importSF.getColumnCount()];
        for (int i = 0; i < conjuntoFilas.size(); i++) {
            for (int j = 0; j < conjuntoFilas.get(i).size(); j++) {
                String dato = String.valueOf(conjuntoFilas.get(i).get(j));
                dato = dato.replaceAll("null", "");
                object[j] = dato;
            }
            model.addRow(object);
        }
    }

    private void outCeldas() {
        int n = 0;
        for (int i = 0; i < tb_importSF.getRowCount(); i++) {
            String dato = String.valueOf(tb_importSF.getValueAt(i, tb_importSF.getSelectedColumn()));
            if (dato.equals("")) {
                n++;
            }
        }
        if (JOptionPane.showConfirmDialog(this, n + " celdas vacías. ¿Deseas ocultarlas?", "Celdas vacías",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            for (int i = 0; i < tb_importSF.getRowCount(); i++) {
                String dato = String.valueOf(tb_importSF.getValueAt(i, tb_importSF.getSelectedColumn()));
                if (dato.equals("")) {
                    ((javax.swing.table.DefaultTableModel) tb_importSF.getModel()).removeRow(i);
                    i--;
                }
            }
        }
    }
    
    private void almacenarTabla() {
        conjuntoFilas = new ArrayList<>();
        for (int i = 0; i < tb_importSF.getRowCount(); i++) {
            fila = new ArrayList<>();
            for (int j = 0; j < tb_importSF.getColumnCount(); j++) {
                String dato = String.valueOf(tb_importSF.getValueAt(i, j));
                fila.add(dato);
            }
            conjuntoFilas.add(fila);
        }
    }*/
    private String sacarOpcion(JTable t) {
        JComboBox combo = new JComboBox();
        ArrayList<String> comboSort = new ArrayList<>();
        for (int i = 0; i < t.getColumnCount(); i++) {
            if (!t.getColumnModel().getColumn(i).getHeaderValue().equals("")) {
                comboSort.add(String.valueOf(t.getColumnModel().getColumn(i).getHeaderValue()));
            }
        }
        Collections.sort(comboSort);
        for (int i = 0; i < comboSort.size(); i++) {
            combo.addItem(comboSort.get(i));
        }
        int close = JOptionPane.showConfirmDialog(null, combo, "Tabla con los datos para rellenar", JOptionPane.YES_OPTION);
        String dato = "";
        if (close == 0) {
            dato = String.valueOf(combo.getSelectedItem());
        }
        return dato;
    }

    private int sacarColumnaConDatos(JTable t) {
        columnaDatos = sacarOpcion(t);
        int indiceColumna = 0;
        if (!columnaDatos.equals("")) {
            if (t.isVisible()) {
                for (int i = 0; i < t.getColumnCount(); i++) {
                    if (t.getColumnModel().getColumn(i).getHeaderValue().equals(columnaDatos)) {
                        indiceColumna = i;
                    }
                }
            }
        } else {
            indiceColumna = -1;
        }

        return indiceColumna;
    }

    private int sacarColumnaRef(JTable t, JComboBox cb) {
        int indiceColumna = 0;
        if (t.isVisible()) {
            for (int i = 0; i < t.getColumnCount(); i++) {
                if (t.getColumnModel().getColumn(i).getHeaderValue().equals(String.valueOf(cb.getSelectedItem()))) {
                    indiceColumna = i;
                }
            }
        }
        return indiceColumna;
    }

    private boolean guardarDatos(JTable t, JComboBox cb) {
        boolean esCorrecto = true;
        int fila = t.getRowCount();
        int columnconDatos = sacarColumnaConDatos(t);
        int columnRef = sacarColumnaRef(t, cb);
        if (columnconDatos != -1) {
            valores = new HashMap<>();
            for (int i = 0; i < fila; i++) {
                valores.put(String.valueOf(t.getValueAt(i, columnRef)), String.valueOf(t.getValueAt(i, columnconDatos)));
            }
        } else {
            esCorrecto = false;
        }
        return esCorrecto;
    }

    private int sacarColumnaRef1(JTable t, JComboBox cb) {
        int indiceColumna = 0;
        if (t.isVisible()) {
            for (int i = 0; i < t.getColumnCount(); i++) {
                if (t.getColumnModel().getColumn(i).getHeaderValue().equals(String.valueOf(cb.getSelectedItem()))) {
                    indiceColumna = i;
                }
            }
        }
        return indiceColumna;
    }

    private void guardarCambiosdeDeshacer(JTable t) {
        prueba = new ArrayList<>();
        String dato = "";
        for (int i = 0; i < t.getRowCount(); i++) {
            dato = String.valueOf(t.getValueAt(i, t.getSelectedColumn()));
            prueba.add(dato);
        }
        btDeshacer.setEnabled(true);
        btn_siguientemodificado.setEnabled(true);
    }

    private void deshacer(JTable t) {
        for (int i = 0; i < t.getRowCount(); i++) {
            String dato = prueba.get(i);
            dato = dato.replaceAll("null", "");
            t.setValueAt(dato, i, t.getSelectedColumn());
        }
    }

    /*private int rellenar(JTable t, JComboBox cb) {
        int nCambios = 0;
        int fila = t.getRowCount();
        guardarCambiosdeDeshacer(t);
        for (int i = 0; i < fila; i++) {
            String datoRef1 = String.valueOf(t.getValueAt(i, sacarColumnaRef1(t, cb)));
            if (rbAPI.isSelected()) {
                if (String.valueOf(t.getValueAt(i, t.getSelectedColumn())).equals("")) {

                    if (!datoRef1.equals("")) {
                        String dato = valores.get(datoRef1);
                        try {
                            dato = dato.replaceAll("null", "");
                            dato = dato.replaceAll("NULL", "");
                            if (dato != null && dato.compareTo("") != 0) {
                                t.setValueAt(dato, i, t.getSelectedColumn());
                                if (valores.get(datoRef1) != null && valores.get(datoRef1).compareTo("") != 0) {
                                    nCambios++;
                                }
                            }
                        } catch (Exception e) {
                            t.setValueAt("", i, t.getSelectedColumn());
                        }
                    }
                }
            } else {
                if (!datoRef1.equals("")) {
                    String dato = valores.get(datoRef1);
                    try {
                        dato = dato.replaceAll("null", "");
                        dato = dato.replaceAll("NULL", "");
                        if (dato != null && dato.compareTo("") != 0) {
                            t.setValueAt(dato, i, t.getSelectedColumn());
                            if (valores.get(datoRef1) != null && valores.get(datoRef1).compareTo("") != 0) {
                                nCambios++;
                            }
                        }
                    } catch (Exception e) {
                        t.setValueAt("", i, t.getSelectedColumn());
                    }
                }
            }
        }
        return nCambios;
    }*/
    private int rellenar(JTable t, JComboBox cb) {
        int nCambios = 0;
        int fila = t.getRowCount();
        guardarCambiosdeDeshacer(t);
        for (int i = 0; i < fila; i++) {
            String datoRef1 = String.valueOf(t.getValueAt(i, sacarColumnaRef1(t, cb)));
            if (rbAPI.isSelected()) {
                if (String.valueOf(t.getValueAt(i, t.getSelectedColumn())).equals("")) {
                    if (!datoRef1.equals("")) {
                        try {
                            String dato = valores.get(datoRef1);
                            dato = dato.replaceAll("null", "");
                            if (dato != null && dato.compareTo("") != 0) {
                                t.setValueAt(dato, i, t.getSelectedColumn());
                                if (valores.get(datoRef1) != null && valores.get(datoRef1).compareTo("") != 0) {
                                    nCambios++;
                                }
                            }
                        } catch (Exception e) {
                            t.setValueAt("", i, t.getSelectedColumn());
                        }
                    }
                }
            } else {
                if (!datoRef1.equals("")) {
                    try {
                        String dato = valores.get(datoRef1);
                        dato = dato.replaceAll("null", "");
                        if (dato != null && dato.compareTo("") != 0) {
                            t.setValueAt(dato, i, t.getSelectedColumn());
                            if (valores.get(datoRef1) != null && valores.get(datoRef1).compareTo("") != 0) {
                                nCambios++;
                            }
                        }
                    } catch (Exception e) {
                        t.setValueAt("", i, t.getSelectedColumn());
                    }
                }
            }
        }
        return nCambios;
    }

    private void rellenarCombos() {
        cb_api.removeAllItems();
        cb_bc.removeAllItems();
        cb_sf.removeAllItems();
        ArrayList<String> cbSFsort;
        cbSFsort = new ArrayList<>();
        ArrayList<String> cbBCsort;
        cbBCsort = new ArrayList<>();
        ArrayList<String> cbAPIsort;
        cbAPIsort = new ArrayList<>();
        for (int i = 0; i < tb_importBC.getColumnCount(); i++) {
            cbBCsort.add(String.valueOf(tb_importBC.getColumnModel().getColumn(i).getHeaderValue()));
            Collections.sort(cbBCsort);
        }
        for (int i = 0; i < cbBCsort.size(); i++) {
            cb_bc.addItem(cbBCsort.get(i));
        }
        for (int i = 0; i < tb_importAPI.getColumnCount(); i++) {
            cbAPIsort.add(String.valueOf(tb_importAPI.getColumnModel().getColumn(i).getHeaderValue()));
            Collections.sort(cbAPIsort);
        }
        for (int i = 0; i < cbAPIsort.size(); i++) {
            cb_api.addItem(cbAPIsort.get(i));
        }
        for (int i = 0; i < tb_importSF.getColumnCount(); i++) {
            cbSFsort.add(String.valueOf(tb_importSF.getColumnModel().getColumn(i).getHeaderValue()));
            Collections.sort(cbSFsort);
        }
        for (int i = 0; i < cbSFsort.size(); i++) {
            cb_sf.addItem(cbSFsort.get(i));
        }

    }

    private void exportarExcel(JTable t) throws IOException {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Seleccione una ruta");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().toString().concat(".xls");
            try {
                File archivoXLS = new File(ruta);
                if (archivoXLS.exists()) {
                    archivoXLS.delete();
                }
                archivoXLS.createNewFile();
                Workbook libro = new HSSFWorkbook();
                FileOutputStream archivo = new FileOutputStream(archivoXLS);
                Sheet hoja = libro.createSheet("SalesForce_EXP");
                hoja.setDisplayGridlines(false);
                for (int f = 0; f < t.getRowCount(); f++) {
                    Row fila = hoja.createRow(f);
                    for (int c = 0; c < t.getColumnCount(); c++) {
                        Cell celda = fila.createCell(c);
                        if (f == 0) {
                            celda.setCellValue(t.getColumnName(c));
                        }
                    }
                }
                int filaInicio = 1;
                for (int f = 0; f < t.getRowCount(); f++) {
                    Row fila = hoja.createRow(filaInicio);
                    filaInicio++;
                    for (int c = 0; c < t.getColumnCount(); c++) {
                        Cell celda = fila.createCell(c);
                        String dato = String.valueOf(t.getValueAt(f, c));
                        dato = dato.replaceAll("null", "");
                        if (t.getValueAt(f, c) instanceof Double) {
                            celda.setCellValue(Double.parseDouble(dato));
                        } else if (t.getValueAt(f, c) instanceof Float) {
                            celda.setCellValue(Float.parseFloat(dato));
                        } else {
                            celda.setCellValue(dato);
                        }
                    }
                }
                libro.write(archivo);
                archivo.close();
                Desktop.getDesktop().open(archivoXLS);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error. \nIntentelo de nuevo");
            }
        }
    }

    private void resizeColumnWidth(JTable table) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 150;
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private boolean importarExcel(JTable t) {
        isImport = false;
        indiceFila = -1;
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setDialogTitle("Seleccionar archivo Excel");

        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos Excel", "xls", "xlsx"));

        int seleccion = fileChooser.showOpenDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();

            try (FileInputStream archivoExcel = new FileInputStream(archivo)) {

                Workbook workbook = WorkbookFactory.create(archivoExcel);

                Sheet sheet = workbook.getSheetAt(0);

                Iterator<Row> rowIterator = sheet.rowIterator();
                DefaultTableModel model = new DefaultTableModel();
                t.setModel(model);

                int filaAescribir = (Integer.parseInt(JOptionPane.showInputDialog(this, "Introduce a partir de que fila quieres que se escriba el Excel"))) - 1;

                while (rowIterator.hasNext()) {
                    indiceFila++;
                    Row fila = (Row) rowIterator.next();
                    Iterator columnaIterator = fila.cellIterator();
                    Object[] listaColumna = new Object[1000];
                    int indiceColumna = -1;
                    while (columnaIterator.hasNext()) {
                        indiceColumna++;
                        Cell celda = (Cell) columnaIterator.next();
                        if (indiceFila == filaAescribir) {
                            model.addColumn(celda.getStringCellValue());
                        } else {
                            if (celda != null) {
                                if (celda.getCellType() == CellType.NUMERIC) {
                                    listaColumna[indiceColumna] = (int) Math.round(celda.getNumericCellValue());
                                }
                                if (celda.getCellType() == CellType.BOOLEAN) {
                                    listaColumna[indiceColumna] = celda.getBooleanCellValue();
                                }
                                if (celda.getCellType() == CellType.STRING) {
                                    listaColumna[indiceColumna] = celda.getStringCellValue();
                                }
                            }

                        }
                    }
                    if (indiceFila > filaAescribir) {
                        model.addRow(listaColumna);
                    }

                }
                isImport = true;
                resizeColumnWidth(t);
                t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                borrarColumnasinit(t);
                rellenarCombos();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error al importar el archivo. \nIntentelo de nuevo");
            }

        } else {
            isImport = false;
        }
        return isImport;

    }

    private void borrarFilas(JTable t) {
        for (int i = 0; i < t.getSelectedRows().length; i++) {
            ((javax.swing.table.DefaultTableModel) t.getModel()).removeRow(t.getSelectedRows()[i]);
            i--;
        }
    }

    private void borrarColumnasinit(JTable t) {
        for (int i = 0; i < t.getColumnCount(); i++) {
            if (t.getColumnModel().getColumn(i).getHeaderValue().equals("")) {
                t.removeColumn(t.getColumnModel().getColumn(i));
            }
        }
    }

    private void borrarColumnas(JTable t) {
        for (int i = 0; i < t.getSelectedColumns().length; i++) {
            t.removeColumn(t.getColumnModel().getColumn(t.getSelectedColumns()[i]));
            i--;
        }
    }

    private void cambiarVista(int n) {
        vista = n;
        vista++;

        if (vista > 2) {
            vista = 0;
        }

        switch (vista) {
            case 0:
                if (tb_importAPI.getRowCount() > 4) {
                    txt_nombretabla.setText("");
                    tb_importAPI.setVisible(true);
                    scroll_API.setVisible(true);
                    tb_importBC.setVisible(false);
                    scroll_BC.setVisible(false);
                    tb_importSF.setVisible(false);
                    scroll_SF.setVisible(false);
                    txt_nombretabla.setText("TABLA APIGES");
                    txt_tablapreview.setText("");
                    btn_mostrar.setEnabled(true);
                    btn_ocultar.setEnabled(true);
                    headerMouseListener(tb_importAPI);
                } else {
                    txt_nombretabla.setText("TABLA APIGES NO IMPORTADA");
                    tb_importSF.setVisible(false);
                    scroll_SF.setVisible(false);
                    btn_mostrar.setEnabled(false);
                    btn_ocultar.setEnabled(false);
                }
                jButton1.setText("CAMBIAR VISTA A EXCEL BC");
                break;
            case 1:
                if (tb_importBC.getRowCount() > 4) {
                    txt_nombretabla.setText("");
                    tb_importBC.setVisible(true);
                    scroll_BC.setVisible(true);
                    tb_importAPI.setVisible(false);
                    scroll_API.setVisible(false);
                    tb_importSF.setVisible(false);
                    scroll_SF.setVisible(false);
                    txt_nombretabla.setText("TABLA BC");
                    txt_tablapreview.setText("");
                    btn_mostrar.setEnabled(true);
                    btn_ocultar.setEnabled(true);
                    headerMouseListener(tb_importBC);
                } else {
                    txt_nombretabla.setText("TABLA BC NO IMPORTADA");
                    tb_importAPI.setVisible(false);
                    scroll_API.setVisible(false);
                    btn_mostrar.setEnabled(false);
                    btn_ocultar.setEnabled(false);
                }
                jButton1.setText("CAMBIAR VISTA A EXCEL SF");
                break;
            case 2:
                if (tb_importSF.getRowCount() > 4) {
                    txt_nombretabla.setText("");
                    tb_importSF.setVisible(true);
                    scroll_SF.setVisible(true);
                    tb_importAPI.setVisible(false);
                    scroll_API.setVisible(false);
                    tb_importBC.setVisible(false);
                    scroll_BC.setVisible(false);
                    txt_nombretabla.setText("TABLA SF");
                    txt_tablapreview.setText("");
                    btn_mostrar.setEnabled(true);
                    btn_ocultar.setEnabled(true);
                    headerMouseListener(tb_importSF);
                } else {
                    txt_nombretabla.setText("TABLA SF NO IMPORTADA");
                    tb_importBC.setVisible(false);
                    scroll_BC.setVisible(false);
                    btn_mostrar.setEnabled(false);
                    btn_ocultar.setEnabled(false);
                }
                jButton1.setText("CAMBIAR VISTA A EXCEL APIGES");
                break;
            default:
                break;
        }
    }

    private void rellenar() {
        if (rbAPI.isSelected()) {
            tb_importAPI.setVisible(true);
            if (guardarDatos(tb_importAPI, cb_api)) {
                tb_importAPI.setVisible(false);
                int cambios = rellenar(tb_importSF, cb_sf);
                JOptionPane.showMessageDialog(rootPane, cambios + " registros modificados.");
            }
        }
        if (rbBC.isSelected()) {
            tb_importBC.setVisible(true);
            if (guardarDatos(tb_importBC, cb_bc)) {
                tb_importBC.setVisible(false);
                int cambios = rellenar(tb_importSF, cb_sf);
                JOptionPane.showMessageDialog(rootPane, cambios + " registros modificados.");
            }
        }
    }

    private void iniciarVista() {
        vista = -1;
        btn_rellenar.setEnabled(false);
        rbAPI.setEnabled(false);
        rbBC.setEnabled(false);
        btn_BorrarColumna.setEnabled(false);
        btn_BorrarFilas.setEnabled(false);
        btDeshacer.setEnabled(false);
        btn_siguientemodificado.setEnabled(false);
        btn_mostrar.setEnabled(false);
        btn_ocultar.setEnabled(false);

        tb_importBC.setVisible(false);
        scroll_BC.setVisible(false);
        tb_importAPI.setVisible(false);
        scroll_API.setVisible(false);
        tb_importSF.setVisible(false);
        scroll_SF.setVisible(false);

        cb_api.removeAllItems();
        cb_api.setEnabled(false);
        cb_sf.removeAllItems();
        cb_sf.setEnabled(false);
        cb_bc.removeAllItems();
        cb_bc.setEnabled(false);

        btn_exportar.setEnabled(false);
        txt_nombretabla.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeshacer;
    private javax.swing.JButton btn_BorrarColumna;
    private javax.swing.JButton btn_BorrarFilas;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_exportar;
    private javax.swing.JButton btn_importApi;
    private javax.swing.JButton btn_importBC;
    private javax.swing.JButton btn_importSF;
    private javax.swing.JButton btn_mostrar;
    private javax.swing.JButton btn_ocultar;
    private javax.swing.JButton btn_rellenar;
    private javax.swing.JButton btn_siguientemodificado;
    private javax.swing.JButton btn_siguientevacio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cb_api;
    private javax.swing.JComboBox<String> cb_bc;
    private javax.swing.JComboBox<String> cb_sf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbAPI;
    private javax.swing.JRadioButton rbBC;
    private javax.swing.JScrollPane scroll_API;
    private javax.swing.JScrollPane scroll_BC;
    private javax.swing.JScrollPane scroll_SF;
    private javax.swing.JTable tb_importAPI;
    private javax.swing.JTable tb_importBC;
    private javax.swing.JTable tb_importSF;
    private javax.swing.JTextField txt_buscador;
    private javax.swing.JLabel txt_dtTotal;
    private javax.swing.JLabel txt_nombretabla;
    private javax.swing.JLabel txt_tablapreview;
    // End of variables declaration//GEN-END:variables
}
